package BioKit;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.RandomAccessFile;
import java.util.HashMap;
import java.util.Map;
import java.util.TreeMap;
import java.util.TreeSet;

/**
 * This class allows to access genes in GTF/GFF files given a index file (which can also be generated by using methods provided by this class).
 * 
 * It can be used to extract the gene information for a given gene without reading the whole GTF/GFF file. The files will be indexed using the
 * gene_id attribute, which might give different values for different GTF/GFF files (i.e. for Ensembl and Refgene).
 * 
 * @author Matthias Barann, using modified code by Fabian Birzele
 *
 */
public class RandomAccessGFFReader 
{
	class Range implements Comparable<Range>
	{
		int start;
		int end;
		
		@Override
		public int compareTo(Range other)
		{
			if(start == other.start)
			{
				return end - other.end;
			}
			
			return start - other.start;
		}
	};
	
	private HashMap<Integer, Long> 	m_pIndex;
	private TreeMap<String, TreeMap<Range, Long>>  m_pIndexPositions; 
	private RandomAccessFile 		m_pFileGTF;
	private String					m_strGTF;
	
	/**
	 * Initializes the random access reader. If the specified index file does not exist it is generated. This may take some time in the case of long files containing
	 * many transcripts. The index for the specified GTF/GFF file is then read to the system to allow for fast access of the data in the FASTA file.
	 * 
	 * @param GTF/GFF file
	 * @param index file
	 * @throws Exception
	 */
	public RandomAccessGFFReader(File pFileGTF, File pIndexFile) throws Exception
	{
		m_pFileGTF = new RandomAccessFile(pFileGTF, "r");
		m_strGTF   = pFileGTF.getAbsolutePath();
		
		if(pIndexFile.exists())
		{
			System.out.println("Read index file " + pIndexFile.getAbsolutePath());
			
			m_pIndex = new HashMap<Integer, Long>();
			m_pIndexPositions = new TreeMap<String, TreeMap<Range, Long>>();
			
			readFileIndex(pIndexFile);
			
			System.out.println("Indexed " + m_pIndex.size() + " sequences... done");
		}
		else
		{
			System.out.println("Create index for file " + pFileGTF.getAbsolutePath());
			
			m_pIndex = new HashMap<Integer, Long>();
			m_pIndexPositions = new TreeMap<String, TreeMap<Range, Long>>();
			
			createAndWriteIndexFile(pIndexFile);
			
			System.out.println("Indexed " + m_pIndex.size() + " sequences... done");
		}
	}
	
	/**
	 * Method can be used to close the current file handle
	 * 
	 * @throws IOException
	 */
	public void close() throws IOException
	{
		m_pIndex = null;
		m_pFileGTF.close();
	}
	
	/**
	 * Optimized version for read sequence files. Will only read the first line after the id has been hit
	 * 
	 * @param strGeneID
	 * @return
	 * @throws IOException 
	 * @throws Exception
	 */
	
	public Gene ReadGene(String strGeneID) throws IOException
	{
		Gene gene = null;
		int nHashID = strGeneID.hashCode();
		if(m_pIndex.containsKey(nHashID))
		{
			long position = m_pIndex.get(nHashID);
			
			BufferedReader pReader = new BufferedReader(new FileReader(new File(m_strGTF)));
			
			GTFParser parser = new GTFParser(pReader, position);
			gene = parser.nextGene().createGene();
			
			return gene;
		}
		
		System.out.println("Failed to read information for gene: " + strGeneID);
		return null;
	}
	
	public TreeSet<Gene> GetGenesForRange(String strRef, int nStart, int nEnd) throws IOException
	{
		if(!m_pIndexPositions.containsKey(strRef))
		{
			System.out.println("RandomAcessGFFReader::GetGenesForRange() -> invalid reference name specified: " + strRef);
			return null;
		}
		
		TreeSet<Gene> vcGenes = new TreeSet<Gene>();
		
		for(Map.Entry<Range, Long> e : m_pIndexPositions.get(strRef).entrySet())
		{
			Range r = e.getKey();
			
			if(r.end >= nStart && r.start <= nEnd)
			{
				BufferedReader pReader = new BufferedReader(new FileReader(new File(m_strGTF)));
				GTFParser parser = new GTFParser(pReader, e.getValue());
				Gene gene = parser.nextGene().createGene();
				
				vcGenes.add(gene);
				
				pReader.close();
			}
		}
		
		return vcGenes;
	}

	public void readFileIndex(File file) throws Exception
	{
		BufferedReader reader = new BufferedReader(new FileReader(file));
		String line = null;
		
		String[] split;
		int counter = 0;
		
		while((line = reader.readLine()) != null)
		{
			split = line.split("\\s+");
			
			Long nFileOffset = Long.parseLong(split[4]);
			
			m_pIndex.put(split[0].hashCode(), nFileOffset);
			
			String strRef 	= split[1];
			int nStart 		= Integer.parseInt(split[2]);
			int nEnd 		= Integer.parseInt(split[3]);
			
			if(m_pIndexPositions.containsKey(strRef))
			{
				TreeMap<Range, Long> mapRangeToFileOffset = m_pIndexPositions.get(strRef);
				Range r	= new Range();
				r.start	= nStart;
				r.end	= nEnd;
				
				mapRangeToFileOffset.put(r, nFileOffset);
			}
			else
			{
				TreeMap<Range, Long> mapRangeToFileOffset = new TreeMap<Range, Long>();
				Range r	= new Range();
				r.start	= nStart;
				r.end	= nEnd;
				
				mapRangeToFileOffset.put(r, nFileOffset);
				m_pIndexPositions.put(strRef, mapRangeToFileOffset);
			}
			
			counter++;
			
			if(counter%100000 == 0)
				System.out.println("Process Sequence " + counter);
		}
		
		reader.close();
	}
	
	/**
	 * Method creates and writes an index to the specified file. The GTF/GFF file must already have been set!
	 * 
	 * @param indexFile
	 * @throws Exception
	 */
	public void createAndWriteIndexFile(File indexFile) throws Exception
	{
		String strLine = null;
		
		PrintWriter writer = new PrintWriter(new FileWriter(indexFile));
		
		BufferedReader pReader = new BufferedReader(new FileReader(new File(m_strGTF)));
		
		long nBytesRead = 0;		
		int counter = 0;
		
		boolean bGeneKeyWord = false;
		
		while((strLine = pReader.readLine()) != null)
		{
			String pSplit[] = strLine.split("\t");
			
			if(pSplit.length == 9 && pSplit[2].equals("gene"))
			{
				bGeneKeyWord = true;
				
				// get gene identifier
				String pSplit2[] = pSplit[8].split("\\s+");
				
				String strGeneID = null;
				for(int i=0; i<pSplit2.length; i++)
				{
					if(pSplit2[i].equals("gene_id"))
					{
						strGeneID = pSplit2[i+1].split("\"")[1].trim().split("\\.")[0];
						break;
					}
				}

				m_pIndex.put(strGeneID.hashCode(), nBytesRead);
				
				String strRef 	= pSplit[0];
				int nStart 		= Integer.parseInt(pSplit[3]);
				int nEnd 		= Integer.parseInt(pSplit[4]);
				
				if(m_pIndexPositions.containsKey(strRef))
				{
					TreeMap<Range, Long> mapRangeToFileOffset = m_pIndexPositions.get(strRef);
					Range r	= new Range();
					r.start	= nStart;
					r.end	= nEnd;
					
					mapRangeToFileOffset.put(r, nBytesRead);
				}
				else
				{
					TreeMap<Range, Long> mapRangeToFileOffset = new TreeMap<Range, Long>();
					Range r	= new Range();
					r.start	= nStart;
					r.end	= nEnd;
					
					mapRangeToFileOffset.put(r, nBytesRead);
					m_pIndexPositions.put(strRef, mapRangeToFileOffset);
				}
				
				writer.println(strGeneID + "\t" + pSplit[0] + "\t" + pSplit[3] + "\t" + pSplit[4] + "\t" + nBytesRead);
				
				counter++;
				
				if(counter%100 == 0)
					System.out.println("Process Sequence " + counter);
			}
			nBytesRead += strLine.getBytes("UTF-8").length + System.lineSeparator().getBytes("UTF-8").length;
		}
		pReader.close();
		
		if(!bGeneKeyWord)
		{
			System.out.println("missing gene specific lines -> try to do it on exons");
			pReader = new BufferedReader(new FileReader(new File(m_strGTF)));
			
			nBytesRead = 0;		
			counter = 0;
			
			String strLastGene = null;
			String strGeneRef = "?";
			int nGeneStart = 0;
			int nGeneEnd = 0;
			long nGeneStartPos = -1;
			
			while((strLine = pReader.readLine()) != null)
			{
				String pSplit[] = strLine.split("\t");
				
				if(pSplit.length == 9 && pSplit[2].equals("exon"))
				{					
					// get gene identifier
					String pSplit2[] = pSplit[8].split("\\s+");
					
					String strGeneID = null;
					for(int i=0; i<pSplit2.length; i++)
					{
						if(pSplit2[i].equals("gene_id"))
						{
							strGeneID = pSplit2[i+1].split("\"")[1].trim().split("\\.")[0];
							break;
						}
					}
					
					String strRef 	= pSplit[0];
					int nStart 		= Integer.parseInt(pSplit[3]);
					int nEnd 		= Integer.parseInt(pSplit[4]);
					
					// skip if the gene ID is still the same
					if(!strGeneID.equals(strLastGene))
					{
						if(strGeneID != null)
						{
							m_pIndex.put(strGeneID.hashCode(), nBytesRead);
							
							if(m_pIndexPositions.containsKey(strRef))
							{
								TreeMap<Range, Long> mapRangeToFileOffset = m_pIndexPositions.get(strRef);
								Range r	= new Range();
								r.start	= nStart;
								r.end	= nEnd;
								
								mapRangeToFileOffset.put(r, nBytesRead);
							}
							else
							{
								TreeMap<Range, Long> mapRangeToFileOffset = new TreeMap<Range, Long>();
								Range r	= new Range();
								r.start	= nStart;
								r.end	= nEnd;
								
								mapRangeToFileOffset.put(r, nBytesRead);
								m_pIndexPositions.put(strRef, mapRangeToFileOffset);
							}
							
							writer.println(strLastGene + "\t" + strGeneRef + "\t" + nGeneStart + "\t" + nGeneEnd + "\t" + nGeneStartPos);
						}
						
						nGeneStart = nStart;
						nGeneEnd   = nEnd;
						
						strGeneRef = strRef;
								
						strLastGene = strGeneID;
						nGeneStartPos = nBytesRead;
					}
					else
					{
//						System.out.println("extending");
						nGeneEnd = nEnd;
					}
					
					counter++;
					
					if(counter%100 == 0)
						System.out.println("Process Sequence " + counter);
				}
				nBytesRead += strLine.getBytes("UTF-8").length + System.lineSeparator().getBytes("UTF-8").length;
			}

			if(strLastGene != null)
			{
				m_pIndex.put(strLastGene.hashCode(), nBytesRead);
				
				if(m_pIndexPositions.containsKey(strGeneRef))
				{
					TreeMap<Range, Long> mapRangeToFileOffset = m_pIndexPositions.get(strGeneRef);
					Range r	= new Range();
					r.start	= nGeneStart;
					r.end	= nGeneEnd;
					
					mapRangeToFileOffset.put(r, nBytesRead);
				}
				else
				{
					TreeMap<Range, Long> mapRangeToFileOffset = new TreeMap<Range, Long>();
					Range r	= new Range();
					r.start	= nGeneStart;
					r.end	= nGeneEnd;
					
					mapRangeToFileOffset.put(r, nBytesRead);
					m_pIndexPositions.put(strGeneRef, mapRangeToFileOffset);
				}
				
				writer.println(strLastGene + "\t" + strGeneRef + "\t" + nGeneStart + "\t" + nGeneEnd + "\t" + nGeneStartPos);
			// write last entry
			}
			
			pReader.close();
		}

		writer.flush();
		writer.close();
	}
	
	/**
	 * This method just creates the index file (at the specified location) for the specified GTF/GFF file. The index is not kept in RAM!
	 * 
	 * @param fasta
	 * @param indexFile
	 * @throws Exception
	 */
	public static void writeIndexFile(File pFileIn, File indexFile) throws Exception
	{
		String strLine = null;
		
		if(indexFile.exists())
		{
			System.out.println("Index for " + pFileIn.getAbsolutePath() + " exists at " + indexFile.getAbsolutePath() + ". Index will NOT BE GENERATED...");
			return;
		}
		
		RandomAccessFile pFileGTF = new RandomAccessFile(pFileIn, "r");
		
		PrintWriter writer = new PrintWriter(new FileWriter(indexFile));
		
		int counter = 0;
		long lastpointer = pFileGTF.getFilePointer();

		while((strLine = pFileGTF.readLine()) != null)
		{
			String pSplit[] = strLine.split("\t");
			
			if(pSplit.length == 9 && pSplit[2].equals("gene"))
			{
				// get gene identifier
				String pSplit2[] = pSplit[8].split("\\s+");
				
				String strGeneID = null;
				for(int i=0; i<pSplit2.length; i++)
				{
					if(pSplit2[i].equals("gene_id"))
					{
						strGeneID = pSplit2[i+1].split("\"")[1].trim().split("\\.")[0];
						break;
					}
				}
				
				writer.println(strGeneID + "\t" + pSplit[0] + "\t" + pSplit[3] + "\t" + pSplit[4] + "\t" + lastpointer);
				
				counter++;
				
				if(counter%100000 == 0)
					System.out.println("Process Sequence " + counter);
			}
			
			lastpointer = pFileGTF.getFilePointer();
		}
		
		writer.flush();
		writer.close();
		
		// reset pointer to 0
		pFileGTF.seek(0);
		pFileGTF.close();
	}
	
	public static void main(String[] args) throws Exception
	{
		if(args[0].equals("-index"))
		{
			writeIndexFile(new File(args[1]), new File(args[2]));
		}
	}
	
}
